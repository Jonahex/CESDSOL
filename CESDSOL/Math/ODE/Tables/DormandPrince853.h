#pragma once

#include <array>

namespace CESDSOL
{
	struct DormandPrince853
	{
		static constexpr size_t AccuracyOrder = 8;
		static constexpr bool IsExplicit = true;

		static constexpr size_t StepCount = 12;
		static constexpr std::array<double, StepCount> ButcherTableauFirstColumn =
		{
			0.,
			0.5260015195876773e-1,
			0.7890022793815160e-1,
			0.1183503419072274,
			0.2816496580927726,
			0.3333333333333333,
			0.25,
			0.3076923076923077,
			0.6512820512820513,
			0.6,
			0.8571428571428571,
			1
		};
		static constexpr std::array<std::array<double, StepCount>, StepCount + 1> ButcherTableauMainPart =
		{ {
			{},
			{ 5.26001519587677318785587544488e-2 },
			{ 1.97250569845378994544595329183e-2, 5.91751709536136983633785987549e-2 },
			{ 2.95875854768068491816892993775e-2, 0., 8.87627564304205475450678981324e-2},
			{ 2.41365134159266685502369798665e-1, 0., -8.84549479328286085344864962717e-1, 9.24834003261792003115737966543e-1},
			{ 3.7037037037037037037037037037e-2, 0., 0., 1.70828608729473871279604482173e-1, 1.25467687566822425016691814123e-1 },
			{ 3.7109375e-2, 0., 0., 1.70252211019544039314978060272e-1, 6.02165389804559606850219397283e-2, -1.7578125e-2 },
			{ 3.70920001185047927108779319836e-2, 0., 0., 1.70383925712239993810214054705e-1, 1.07262030446373284651809199168e-1,
				-1.53194377486244017527936158236e-2, 8.27378916381402288758473766002e-3 },
			{ 6.24110958716075717114429577812e-1, 0., 0., -3.36089262944694129406857109825e0, -8.68219346841726006818189891453e-1,
				2.75920996994467083049415600797e1, 2.01540675504778934086186788979e1, -4.34898841810699588477366255144e1 },
			{ 4.77662536438264365890433908527e-1, 0., 0., -2.48811461997166764192642586468e0, -5.90290826836842996371446475743e-1,
				2.12300514481811942347288949897e1, 1.52792336328824235832596922938e1, -3.32882109689848629194453265587e1,
				-2.03312017085086261358222928593e-2 },
			{ -9.3714243008598732571704021658e-1, 0., 0., 5.18637242884406370830023853209e0, 1.09143734899672957818500254654e0,
				-8.14978701074692612513997267357e0, -1.85200656599969598641566180701e1, 2.27394870993505042818970056734e1,
				2.49360555267965238987089396762e0, -3.0467644718982195003823669022e0 },
			{ 2.27331014751653820792359768449e0, 0., 0., -1.05344954667372501984066689879e1, -2.00087205822486249909675718444e0,
				-1.79589318631187989172765950534e1, 2.79488845294199600508499808837e1, -2.85899827713502369474065508674e0,
				-8.87285693353062954433549289258e0, 1.23605671757943030647266201528e1, 6.43392746015763530355970484046e-1},
			{5.42937341165687622380535766363e-2, 0., 0., 0., 0., 4.45031289275240888144113950566e0, 1.89151789931450038304281599044e0,
				-5.8012039600105847814672114227e0, 3.1116436695781989440891606237e-1, -1.52160949662516078556178806805e-1,
				2.01365400804030348374776537501e-1, 4.47106157277725905176885569043e-2}
		} };

		static constexpr bool IsAdaptive = true;
		static constexpr size_t CorrectionMethodsCount = 2;
		static constexpr std::array<size_t, CorrectionMethodsCount> CorrectionMethodsAccuracyOrders = { 5, 3 };
		static constexpr std::array<std::array<double, StepCount>, CorrectionMethodsCount> ButcherTableauErrorRow =
		{ {
			{
				-0.18980075407240761571470232888,
				0.,
				0.,
				0.,
				0.,
				4.45031289275240888144113950566e0,
				1.89151789931450038304281599044e0,
				-5.8012039600105847814672114227e0,
				-0.4226823213237919629324456792,
				-1.52160949662516078556178806805e-1,
				2.01365400804030348374776537501e-1,
				0.022651792198360825811806203963
			},
			{
				0.1312004499419488073250102996e-01,
				0.,
				0.,
				0.,
				0.,
				-0.1225156446376204440720569753e+01,
				-0.4957589496572501915214079952e+00,
				0.1664377182454986536961530415e+01,
				-0.3503288487499736816886487290e+00,
				0.3341791187130174790297318841e+00,
				0.8192320648511571246570742613e-01,
				-0.2235530786388629525884427845e-01,
			}
		} };

		static constexpr bool IsDenseOutputSupported = true;
		static constexpr size_t DenseOutputStepCount = 3;
		static constexpr std::array<double, DenseOutputStepCount> DenseOutputButcherTableauFirstColumn =
		{
			0.1,
			0.2,
			0.7777777777777777
		};
		static constexpr std::array<std::array<double, StepCount + DenseOutputStepCount + 1>, DenseOutputStepCount> DenseOutputButcherTableauMainPart =
		{ {
			{ 5.61675022830479523392909219681e-2, 0., 0., 0., 0., 0., 2.53500210216624811088794765333e-1,
				-2.46239037470802489917441475441e-1, -1.24191423263816360469010140626e-1, 1.5329179827876569731206322685e-1,
				8.20105229563468988491666602057e-3, 7.56789766054569976138603589584e-3, -8.298e-3 },
			{ 3.18346481635021405060768473261e-2, 0., 0., 0., 0., 0., 2.83009096723667755288322961402e-2,
				5.35419883074385676223797384372e-2, -5.49237485713909884646569340306e-2, 0., 0.,
				-1.08347328697249322858509316994e-4, 3.82571090835658412954920192323e-4, -3.40465008687404560802977114492e-4,
				1.41312443674632500278074618366e-1 },
			{ -4.28896301583791923408573538692e-1, 0., 0., 0., 0., -4.69762141536116384314449447206e0,
				7.68342119606259904184240953878e0, 4.06898981839711007970213554331e0, 3.56727187455281109270669543021e-1,
				0., 0., 0., -1.39902416515901462129418009734e-3, 2.9475147891527723389556272149e0,
				-9.15095847217987001081870187138e0 }
		} };

		static constexpr size_t InterpolationOrder = 7;
		static constexpr std::array<std::array<double, InterpolationOrder + 1>, StepCount + 1 + DenseOutputStepCount> DenseOutputCoefficients =
		{ {
			{0, 1.000000000000000000000000000000, -27.53105226035404271659842540,
			82.69184134175592890654986973, -132.19804393657306867641443513,
			147.46446875669768307631387025, -97.06685363011368083092541200, 25.69393346270374900331258613},
			{},
			{},
			{},
			{},
			{0, 0, -140.8388100119792070962165178, 154.7250546208744670514403293,
			368.1654453170660634034936733, -456.2591884020878125472554903, -75.5319373213575356705607914, 154.1897486902364337405399363},
			{0, 0, -225.8548254781019945262319431,
			435.2980360755647037413807158, -225.9252472011288488359035301,
			292.2541746599040625262099723, -505.4099993329689181977727900, 231.52937917604549567536039109},
			{0, 0, 340.2355060305823694384518648, -550.4144234184736317923455300, 
			-119.0527323496622938607572593, 135.9603691617383728730868818, 545.1091945264187223429503304, -357.6391179106141237828534991},
			{0, 0, 94.33881728449776968713443989, -221.12054649424919595904602524,
			265.75968969337812245878287397, -337.05134702387712642641962709,
			291.78987509083256013786494625, -93.405324183624310003907691704}, 
			{0, 0, -37.91480598543918139254367577,
			89.83563353539686232678971846, -111.02720969393669404257113526,
			140.75210016191606336048588473, -119.25620210405119948759211032, 37.45832313645163315687513935},
			{0, 0, 104.7037457113743914965967915, -240.2767196473131436220740765,
			272.5492837701766487880225092, -345.9748485480495510574337574,
			313.2995536235779851947357716, -104.0996495089623004514724618},
			{0, 0, 29.97442527384382089489742925, -68.32442483140143497975213379,
			76.01170656676542902981609353, -96.51986946699570428020373494,
			88.74316650017616504910439808, -29.84029342666050312334436358},
			{0, 0, -44.53345659001114375443217506,
			100.98594554943962298840224076, -110.12677216650345006134693096,
			137.96299063474374992964801495, -127.82216401767992285670332474, 43.533456590011143754432175058},
			{0, 0, 96.32455395918828294839495060, -283.98520636920586433234013246,
			435.51800005129928352615774456, -500.70315079092238879726984475,
			349.17035710882896960345223265, -96.32455395918828294839495060},
			{0, 0, -39.17726167561543916523148617,
			153.32200449906356096205148986, -312.60989115357340461179991116,
			361.14007718803332216360278360, -201.85219053352347851385436230, 39.17726167561543916523148617},
			{0, 0, -149.7268362579856258142212528,
			347.2628051385481247089435341, -407.0642288973077871174796927,
			520.9742236688993291792350469, -461.1727999101396667706988883, 149.7268362579856258142212528}
		}};
	};
}